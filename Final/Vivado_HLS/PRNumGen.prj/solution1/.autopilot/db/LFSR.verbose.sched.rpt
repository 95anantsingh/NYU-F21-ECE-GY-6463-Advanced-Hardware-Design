

================================================================
== Vivado HLS Report for 'LFSR'
================================================================
* Date:           Fri Dec 24 03:52:50 2021

* Version:        2018.3 (Build 2405991 on Thu Dec 06 23:56:15 MST 2018)
* Project:        PRNumGen.prj
* Solution:       solution1
* Product family: artix7
* Target device:  xc7a100tcsg324-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     4.677|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    0|    0|    0|    0|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 0
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 4.67>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%d_in_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %d_in) nounwind" [PRNumGen.c:7]   --->   Operation 2 'read' 'd_in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%w_en_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %w_en) nounwind" [PRNumGen.c:7]   --->   Operation 3 'read' 'w_en_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%rstn_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %rstn) nounwind" [PRNumGen.c:7]   --->   Operation 4 'read' 'rstn_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "br i1 %rstn_read, label %1, label %5" [PRNumGen.c:13]   --->   Operation 5 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (1.70ns)   --->   "store i32 38177485, i32* @rnum, align 4" [PRNumGen.c:29]   --->   Operation 6 'store' <Predicate = (!rstn_read)> <Delay = 1.70>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 7 'br' <Predicate = (!rstn_read)> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "br i1 %w_en_read, label %2, label %3" [PRNumGen.c:14]   --->   Operation 8 'br' <Predicate = (rstn_read)> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%rnum_load = load i32* @rnum, align 4" [PRNumGen.c:18]   --->   Operation 9 'load' 'rnum_load' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%tmp = trunc i32 %rnum_load to i1" [PRNumGen.c:18]   --->   Operation 10 'trunc' 'tmp' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%tmp_3 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %rnum_load, i32 31)" [PRNumGen.c:18]   --->   Operation 11 'bitselect' 'tmp_3' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%tmp_1 = call i2 @_ssdm_op_PartSelect.i2.i32.i32.i32(i32 %rnum_load, i32 26, i32 27)" [PRNumGen.c:18]   --->   Operation 12 'partselect' 'tmp_1' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%tmp_5 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %rnum_load, i32 22)" [PRNumGen.c:18]   --->   Operation 13 'bitselect' 'tmp_5' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%tmp_6 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %rnum_load, i32 20)" [PRNumGen.c:18]   --->   Operation 14 'bitselect' 'tmp_6' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%tmp_10 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %rnum_load, i32 18)" [PRNumGen.c:18]   --->   Operation 15 'bitselect' 'tmp_10' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%xor = call i32 @_ssdm_op_BitConcatenate.i32.i1.i3.i2.i3.i1.i1.i1.i1.i1.i2.i1.i3.i2.i3.i1.i1.i1.i1.i1.i1.i1(i1 %tmp_3, i3 0, i2 %tmp_1, i3 0, i1 %tmp_5, i1 false, i1 %tmp_6, i1 false, i1 %tmp_10, i2 0, i1 %tmp_3, i3 0, i2 %tmp_1, i3 0, i1 %tmp_5, i1 false, i1 %tmp_6, i1 false, i1 %tmp_10, i1 false, i1 %tmp)" [PRNumGen.c:19]   --->   Operation 16 'bitconcatenate' 'xor' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%tmp_8 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i3.i2.i3.i1.i1.i1.i1.i1.i2.i1.i3.i2.i2(i1 %tmp_3, i3 0, i2 %tmp_1, i3 0, i1 %tmp_5, i1 false, i1 %tmp_6, i1 false, i1 %tmp_10, i2 0, i1 %tmp_3, i3 0, i2 %tmp_1, i2 0)" [PRNumGen.c:20]   --->   Operation 17 'bitconcatenate' 'tmp_8' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%tmp_s = zext i24 %tmp_8 to i32" [PRNumGen.c:20]   --->   Operation 18 'zext' 'tmp_s' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.99ns)   --->   "%xor_1 = xor i32 %tmp_s, %xor" [PRNumGen.c:20]   --->   Operation 19 'xor' 'xor_1' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%tmp_9 = call i28 @_ssdm_op_PartSelect.i28.i32.i32.i32(i32 %xor_1, i32 4, i32 31)" [PRNumGen.c:21]   --->   Operation 20 'partselect' 'tmp_9' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%tmp_11 = zext i28 %tmp_9 to i32" [PRNumGen.c:21]   --->   Operation 21 'zext' 'tmp_11' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp_12 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %xor_1, i32 4)" [PRNumGen.c:20]   --->   Operation 22 'bitselect' 'tmp_12' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp_7 = call i2 @_ssdm_op_PartSelect.i2.i32.i32.i32(i32 %xor_1, i32 4, i32 5)" [PRNumGen.c:20]   --->   Operation 23 'partselect' 'tmp_7' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.99ns)   --->   "%xor_2 = xor i32 %tmp_11, %xor_1" [PRNumGen.c:21]   --->   Operation 24 'xor' 'xor_2' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.99> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp_cast = call i2 @_ssdm_op_PartSelect.i2.i32.i32.i32(i32 %xor_2, i32 2, i32 3)" [PRNumGen.c:21]   --->   Operation 25 'partselect' 'tmp_cast' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp_13 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %xor_2, i32 2)" [PRNumGen.c:21]   --->   Operation 26 'bitselect' 'tmp_13' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%xor_3 = xor i2 %tmp_cast, %tmp_7" [PRNumGen.c:22]   --->   Operation 27 'xor' 'xor_3' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp_14 = call i1 @_ssdm_op_BitSelect.i1.i2.i32(i2 %xor_3, i32 1)" [PRNumGen.c:22]   --->   Operation 28 'bitselect' 'tmp_14' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_2 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %rnum_load, i32 1, i32 31)" [PRNumGen.c:24]   --->   Operation 29 'partselect' 'tmp_2' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp1 = xor i1 %tmp_12, %tmp" [PRNumGen.c:24]   --->   Operation 30 'xor' 'tmp1' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node xor_s)   --->   "%tmp2 = xor i1 %tmp_13, %tmp_14" [PRNumGen.c:24]   --->   Operation 31 'xor' 'tmp2' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.97ns) (out node of the LUT)   --->   "%xor_s = xor i1 %tmp2, %tmp1" [PRNumGen.c:24]   --->   Operation 32 'xor' 'xor_s' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_4 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1 %xor_s, i31 %tmp_2)" [PRNumGen.c:24]   --->   Operation 33 'bitconcatenate' 'tmp_4' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (1.70ns)   --->   "store i32 %tmp_4, i32* @rnum, align 4" [PRNumGen.c:24]   --->   Operation 34 'store' <Predicate = (rstn_read & !w_en_read)> <Delay = 1.70>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "store i32 %tmp_4, i32* @d_out, align 4" [PRNumGen.c:25]   --->   Operation 35 'store' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "br label %4"   --->   Operation 36 'br' <Predicate = (rstn_read & !w_en_read)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (1.70ns)   --->   "store i32 %d_in_read, i32* @rnum, align 4" [PRNumGen.c:15]   --->   Operation 37 'store' <Predicate = (rstn_read & w_en_read)> <Delay = 1.70>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "br label %4" [PRNumGen.c:16]   --->   Operation 38 'br' <Predicate = (rstn_read & w_en_read)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "br label %6" [PRNumGen.c:27]   --->   Operation 39 'br' <Predicate = (rstn_read)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "ret void" [PRNumGen.c:31]   --->   Operation 40 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 4.68ns
The critical path consists of the following:
	'load' operation ('rnum_load', PRNumGen.c:18) on static variable 'rnum' [16]  (0 ns)
	'xor' operation ('xor', PRNumGen.c:20) [26]  (0.995 ns)
	'xor' operation ('xor', PRNumGen.c:21) [31]  (0.995 ns)
	'xor' operation ('xor', PRNumGen.c:22) [34]  (0 ns)
	'xor' operation ('tmp2', PRNumGen.c:24) [38]  (0 ns)
	'xor' operation ('xor_s', PRNumGen.c:24) [39]  (0.978 ns)
	'store' operation (PRNumGen.c:24) of variable 'tmp_4', PRNumGen.c:24 on static variable 'rnum' [41]  (1.71 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
