// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LFSR_HH_
#define _LFSR_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct LFSR : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > rstn;
    sc_in< sc_lv<1> > w_en;
    sc_in< sc_lv<32> > d_in;
    sc_out< sc_lv<32> > d_out;
    sc_out< sc_logic > d_out_ap_vld;


    // Module declarations
    LFSR(sc_module_name name);
    SC_HAS_PROCESS(LFSR);

    ~LFSR();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > rnum;
    sc_signal< sc_lv<1> > rstn_read_read_fu_72_p2;
    sc_signal< sc_lv<32> > tmp_4_fu_320_p3;
    sc_signal< sc_lv<1> > w_en_read_read_fu_66_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_92_p3;
    sc_signal< sc_lv<2> > tmp_1_fu_100_p4;
    sc_signal< sc_lv<1> > tmp_5_fu_110_p3;
    sc_signal< sc_lv<1> > tmp_6_fu_118_p3;
    sc_signal< sc_lv<1> > tmp_10_fu_126_p3;
    sc_signal< sc_lv<1> > tmp_fu_88_p1;
    sc_signal< sc_lv<24> > tmp_8_fu_180_p15;
    sc_signal< sc_lv<32> > tmp_s_fu_212_p1;
    sc_signal< sc_lv<32> > xor_fu_134_p22;
    sc_signal< sc_lv<32> > xor_1_fu_216_p2;
    sc_signal< sc_lv<28> > tmp_9_fu_222_p4;
    sc_signal< sc_lv<32> > tmp_11_fu_232_p1;
    sc_signal< sc_lv<32> > xor_2_fu_254_p2;
    sc_signal< sc_lv<2> > tmp_cast_fu_260_p4;
    sc_signal< sc_lv<2> > tmp_7_fu_244_p4;
    sc_signal< sc_lv<2> > xor_3_fu_278_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_236_p3;
    sc_signal< sc_lv<1> > tmp_13_fu_270_p3;
    sc_signal< sc_lv<1> > tmp_14_fu_284_p3;
    sc_signal< sc_lv<1> > tmp2_fu_308_p2;
    sc_signal< sc_lv<1> > tmp1_fu_302_p2;
    sc_signal< sc_lv<1> > xor_s_fu_314_p2;
    sc_signal< sc_lv<31> > tmp_2_fu_292_p4;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2468ACD;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_d_out();
    void thread_d_out_ap_vld();
    void thread_rstn_read_read_fu_72_p2();
    void thread_tmp1_fu_302_p2();
    void thread_tmp2_fu_308_p2();
    void thread_tmp_10_fu_126_p3();
    void thread_tmp_11_fu_232_p1();
    void thread_tmp_12_fu_236_p3();
    void thread_tmp_13_fu_270_p3();
    void thread_tmp_14_fu_284_p3();
    void thread_tmp_1_fu_100_p4();
    void thread_tmp_2_fu_292_p4();
    void thread_tmp_3_fu_92_p3();
    void thread_tmp_4_fu_320_p3();
    void thread_tmp_5_fu_110_p3();
    void thread_tmp_6_fu_118_p3();
    void thread_tmp_7_fu_244_p4();
    void thread_tmp_8_fu_180_p15();
    void thread_tmp_9_fu_222_p4();
    void thread_tmp_cast_fu_260_p4();
    void thread_tmp_fu_88_p1();
    void thread_tmp_s_fu_212_p1();
    void thread_w_en_read_read_fu_66_p2();
    void thread_xor_1_fu_216_p2();
    void thread_xor_2_fu_254_p2();
    void thread_xor_3_fu_278_p2();
    void thread_xor_fu_134_p22();
    void thread_xor_s_fu_314_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
