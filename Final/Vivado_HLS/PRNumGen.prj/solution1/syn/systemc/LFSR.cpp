// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LFSR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LFSR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LFSR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> LFSR::ap_ST_fsm_state1 = "1";
const sc_lv<32> LFSR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> LFSR::ap_const_lv32_2468ACD = "10010001101000101011001101";
const sc_lv<1> LFSR::ap_const_lv1_0 = "0";
const sc_lv<1> LFSR::ap_const_lv1_1 = "1";
const sc_lv<32> LFSR::ap_const_lv32_1F = "11111";
const sc_lv<32> LFSR::ap_const_lv32_1A = "11010";
const sc_lv<32> LFSR::ap_const_lv32_1B = "11011";
const sc_lv<32> LFSR::ap_const_lv32_16 = "10110";
const sc_lv<32> LFSR::ap_const_lv32_14 = "10100";
const sc_lv<32> LFSR::ap_const_lv32_12 = "10010";
const sc_lv<3> LFSR::ap_const_lv3_0 = "000";
const sc_lv<2> LFSR::ap_const_lv2_0 = "00";
const sc_lv<32> LFSR::ap_const_lv32_4 = "100";
const sc_lv<32> LFSR::ap_const_lv32_5 = "101";
const sc_lv<32> LFSR::ap_const_lv32_2 = "10";
const sc_lv<32> LFSR::ap_const_lv32_3 = "11";
const sc_lv<32> LFSR::ap_const_lv32_1 = "1";
const bool LFSR::ap_const_boolean_1 = true;

LFSR::LFSR(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_d_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rstn_read_read_fu_72_p2 );
    sensitive << ( w_en_read_read_fu_66_p2 );
    sensitive << ( xor_s_fu_314_p2 );
    sensitive << ( tmp_2_fu_292_p4 );

    SC_METHOD(thread_d_out_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rstn_read_read_fu_72_p2 );
    sensitive << ( w_en_read_read_fu_66_p2 );

    SC_METHOD(thread_rstn_read_read_fu_72_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rstn );

    SC_METHOD(thread_tmp1_fu_302_p2);
    sensitive << ( tmp_fu_88_p1 );
    sensitive << ( tmp_12_fu_236_p3 );

    SC_METHOD(thread_tmp2_fu_308_p2);
    sensitive << ( tmp_13_fu_270_p3 );
    sensitive << ( tmp_14_fu_284_p3 );

    SC_METHOD(thread_tmp_10_fu_126_p3);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_11_fu_232_p1);
    sensitive << ( tmp_9_fu_222_p4 );

    SC_METHOD(thread_tmp_12_fu_236_p3);
    sensitive << ( xor_1_fu_216_p2 );

    SC_METHOD(thread_tmp_13_fu_270_p3);
    sensitive << ( xor_2_fu_254_p2 );

    SC_METHOD(thread_tmp_14_fu_284_p3);
    sensitive << ( xor_3_fu_278_p2 );

    SC_METHOD(thread_tmp_1_fu_100_p4);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_2_fu_292_p4);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_3_fu_92_p3);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_4_fu_320_p3);
    sensitive << ( xor_s_fu_314_p2 );
    sensitive << ( tmp_2_fu_292_p4 );

    SC_METHOD(thread_tmp_5_fu_110_p3);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_6_fu_118_p3);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_7_fu_244_p4);
    sensitive << ( xor_1_fu_216_p2 );

    SC_METHOD(thread_tmp_8_fu_180_p15);
    sensitive << ( tmp_3_fu_92_p3 );
    sensitive << ( tmp_1_fu_100_p4 );
    sensitive << ( tmp_5_fu_110_p3 );
    sensitive << ( tmp_6_fu_118_p3 );
    sensitive << ( tmp_10_fu_126_p3 );

    SC_METHOD(thread_tmp_9_fu_222_p4);
    sensitive << ( xor_1_fu_216_p2 );

    SC_METHOD(thread_tmp_cast_fu_260_p4);
    sensitive << ( xor_2_fu_254_p2 );

    SC_METHOD(thread_tmp_fu_88_p1);
    sensitive << ( rnum );

    SC_METHOD(thread_tmp_s_fu_212_p1);
    sensitive << ( tmp_8_fu_180_p15 );

    SC_METHOD(thread_w_en_read_read_fu_66_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( w_en );

    SC_METHOD(thread_xor_1_fu_216_p2);
    sensitive << ( tmp_s_fu_212_p1 );
    sensitive << ( xor_fu_134_p22 );

    SC_METHOD(thread_xor_2_fu_254_p2);
    sensitive << ( xor_1_fu_216_p2 );
    sensitive << ( tmp_11_fu_232_p1 );

    SC_METHOD(thread_xor_3_fu_278_p2);
    sensitive << ( tmp_cast_fu_260_p4 );
    sensitive << ( tmp_7_fu_244_p4 );

    SC_METHOD(thread_xor_fu_134_p22);
    sensitive << ( tmp_3_fu_92_p3 );
    sensitive << ( tmp_1_fu_100_p4 );
    sensitive << ( tmp_5_fu_110_p3 );
    sensitive << ( tmp_6_fu_118_p3 );
    sensitive << ( tmp_10_fu_126_p3 );
    sensitive << ( tmp_fu_88_p1 );

    SC_METHOD(thread_xor_s_fu_314_p2);
    sensitive << ( tmp2_fu_308_p2 );
    sensitive << ( tmp1_fu_302_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "1";
    rnum = "00000010010001101000101011001101";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LFSR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rstn, "(port)rstn");
    sc_trace(mVcdFile, w_en, "(port)w_en");
    sc_trace(mVcdFile, d_in, "(port)d_in");
    sc_trace(mVcdFile, d_out, "(port)d_out");
    sc_trace(mVcdFile, d_out_ap_vld, "(port)d_out_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, rnum, "rnum");
    sc_trace(mVcdFile, rstn_read_read_fu_72_p2, "rstn_read_read_fu_72_p2");
    sc_trace(mVcdFile, tmp_4_fu_320_p3, "tmp_4_fu_320_p3");
    sc_trace(mVcdFile, w_en_read_read_fu_66_p2, "w_en_read_read_fu_66_p2");
    sc_trace(mVcdFile, tmp_3_fu_92_p3, "tmp_3_fu_92_p3");
    sc_trace(mVcdFile, tmp_1_fu_100_p4, "tmp_1_fu_100_p4");
    sc_trace(mVcdFile, tmp_5_fu_110_p3, "tmp_5_fu_110_p3");
    sc_trace(mVcdFile, tmp_6_fu_118_p3, "tmp_6_fu_118_p3");
    sc_trace(mVcdFile, tmp_10_fu_126_p3, "tmp_10_fu_126_p3");
    sc_trace(mVcdFile, tmp_fu_88_p1, "tmp_fu_88_p1");
    sc_trace(mVcdFile, tmp_8_fu_180_p15, "tmp_8_fu_180_p15");
    sc_trace(mVcdFile, tmp_s_fu_212_p1, "tmp_s_fu_212_p1");
    sc_trace(mVcdFile, xor_fu_134_p22, "xor_fu_134_p22");
    sc_trace(mVcdFile, xor_1_fu_216_p2, "xor_1_fu_216_p2");
    sc_trace(mVcdFile, tmp_9_fu_222_p4, "tmp_9_fu_222_p4");
    sc_trace(mVcdFile, tmp_11_fu_232_p1, "tmp_11_fu_232_p1");
    sc_trace(mVcdFile, xor_2_fu_254_p2, "xor_2_fu_254_p2");
    sc_trace(mVcdFile, tmp_cast_fu_260_p4, "tmp_cast_fu_260_p4");
    sc_trace(mVcdFile, tmp_7_fu_244_p4, "tmp_7_fu_244_p4");
    sc_trace(mVcdFile, xor_3_fu_278_p2, "xor_3_fu_278_p2");
    sc_trace(mVcdFile, tmp_12_fu_236_p3, "tmp_12_fu_236_p3");
    sc_trace(mVcdFile, tmp_13_fu_270_p3, "tmp_13_fu_270_p3");
    sc_trace(mVcdFile, tmp_14_fu_284_p3, "tmp_14_fu_284_p3");
    sc_trace(mVcdFile, tmp2_fu_308_p2, "tmp2_fu_308_p2");
    sc_trace(mVcdFile, tmp1_fu_302_p2, "tmp1_fu_302_p2");
    sc_trace(mVcdFile, xor_s_fu_314_p2, "xor_s_fu_314_p2");
    sc_trace(mVcdFile, tmp_2_fu_292_p4, "tmp_2_fu_292_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

LFSR::~LFSR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void LFSR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if ((esl_seteq<1,1,1>(rstn_read_read_fu_72_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, w_en_read_read_fu_66_p2.read()))) {
            rnum = d_in.read();
        } else if ((esl_seteq<1,1,1>(rstn_read_read_fu_72_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, w_en_read_read_fu_66_p2.read()))) {
            rnum = tmp_4_fu_320_p3.read();
        } else if (esl_seteq<1,1,1>(rstn_read_read_fu_72_p2.read(), ap_const_lv1_0)) {
            rnum = ap_const_lv32_2468ACD;
        }
    }
}

void LFSR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void LFSR::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void LFSR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void LFSR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void LFSR::thread_d_out() {
    d_out = esl_concat<1,31>(xor_s_fu_314_p2.read(), tmp_2_fu_292_p4.read());
}

void LFSR::thread_d_out_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(rstn_read_read_fu_72_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, w_en_read_read_fu_66_p2.read()))) {
        d_out_ap_vld = ap_const_logic_1;
    } else {
        d_out_ap_vld = ap_const_logic_0;
    }
}

void LFSR::thread_rstn_read_read_fu_72_p2() {
    rstn_read_read_fu_72_p2 = rstn.read();
}

void LFSR::thread_tmp1_fu_302_p2() {
    tmp1_fu_302_p2 = (tmp_12_fu_236_p3.read() ^ tmp_fu_88_p1.read());
}

void LFSR::thread_tmp2_fu_308_p2() {
    tmp2_fu_308_p2 = (tmp_13_fu_270_p3.read() ^ tmp_14_fu_284_p3.read());
}

void LFSR::thread_tmp_10_fu_126_p3() {
    tmp_10_fu_126_p3 = rnum.read().range(18, 18);
}

void LFSR::thread_tmp_11_fu_232_p1() {
    tmp_11_fu_232_p1 = esl_zext<32,28>(tmp_9_fu_222_p4.read());
}

void LFSR::thread_tmp_12_fu_236_p3() {
    tmp_12_fu_236_p3 = xor_1_fu_216_p2.read().range(4, 4);
}

void LFSR::thread_tmp_13_fu_270_p3() {
    tmp_13_fu_270_p3 = xor_2_fu_254_p2.read().range(2, 2);
}

void LFSR::thread_tmp_14_fu_284_p3() {
    tmp_14_fu_284_p3 = xor_3_fu_278_p2.read().range(1, 1);
}

void LFSR::thread_tmp_1_fu_100_p4() {
    tmp_1_fu_100_p4 = rnum.read().range(27, 26);
}

void LFSR::thread_tmp_2_fu_292_p4() {
    tmp_2_fu_292_p4 = rnum.read().range(31, 1);
}

void LFSR::thread_tmp_3_fu_92_p3() {
    tmp_3_fu_92_p3 = rnum.read().range(31, 31);
}

void LFSR::thread_tmp_4_fu_320_p3() {
    tmp_4_fu_320_p3 = esl_concat<1,31>(xor_s_fu_314_p2.read(), tmp_2_fu_292_p4.read());
}

void LFSR::thread_tmp_5_fu_110_p3() {
    tmp_5_fu_110_p3 = rnum.read().range(22, 22);
}

void LFSR::thread_tmp_6_fu_118_p3() {
    tmp_6_fu_118_p3 = rnum.read().range(20, 20);
}

void LFSR::thread_tmp_7_fu_244_p4() {
    tmp_7_fu_244_p4 = xor_1_fu_216_p2.read().range(5, 4);
}

void LFSR::thread_tmp_8_fu_180_p15() {
    tmp_8_fu_180_p15 = esl_concat<22,2>(esl_concat<20,2>(esl_concat<17,3>(esl_concat<16,1>(esl_concat<14,2>(esl_concat<13,1>(esl_concat<12,1>(esl_concat<11,1>(esl_concat<10,1>(esl_concat<9,1>(esl_concat<6,3>(esl_concat<4,2>(esl_concat<1,3>(tmp_3_fu_92_p3.read(), ap_const_lv3_0), tmp_1_fu_100_p4.read()), ap_const_lv3_0), tmp_5_fu_110_p3.read()), ap_const_lv1_0), tmp_6_fu_118_p3.read()), ap_const_lv1_0), tmp_10_fu_126_p3.read()), ap_const_lv2_0), tmp_3_fu_92_p3.read()), ap_const_lv3_0), tmp_1_fu_100_p4.read()), ap_const_lv2_0);
}

void LFSR::thread_tmp_9_fu_222_p4() {
    tmp_9_fu_222_p4 = xor_1_fu_216_p2.read().range(31, 4);
}

void LFSR::thread_tmp_cast_fu_260_p4() {
    tmp_cast_fu_260_p4 = xor_2_fu_254_p2.read().range(3, 2);
}

void LFSR::thread_tmp_fu_88_p1() {
    tmp_fu_88_p1 = rnum.read().range(1-1, 0);
}

void LFSR::thread_tmp_s_fu_212_p1() {
    tmp_s_fu_212_p1 = esl_zext<32,24>(tmp_8_fu_180_p15.read());
}

void LFSR::thread_w_en_read_read_fu_66_p2() {
    w_en_read_read_fu_66_p2 = w_en.read();
}

void LFSR::thread_xor_1_fu_216_p2() {
    xor_1_fu_216_p2 = (tmp_s_fu_212_p1.read() ^ xor_fu_134_p22.read());
}

void LFSR::thread_xor_2_fu_254_p2() {
    xor_2_fu_254_p2 = (tmp_11_fu_232_p1.read() ^ xor_1_fu_216_p2.read());
}

void LFSR::thread_xor_3_fu_278_p2() {
    xor_3_fu_278_p2 = (tmp_cast_fu_260_p4.read() ^ tmp_7_fu_244_p4.read());
}

void LFSR::thread_xor_fu_134_p22() {
    xor_fu_134_p22 = esl_concat<31,1>(esl_concat<30,1>(esl_concat<29,1>(esl_concat<28,1>(esl_concat<27,1>(esl_concat<26,1>(esl_concat<25,1>(esl_concat<22,3>(esl_concat<20,2>(esl_concat<17,3>(esl_concat<16,1>(esl_concat<14,2>(esl_concat<13,1>(esl_concat<12,1>(esl_concat<11,1>(esl_concat<10,1>(esl_concat<9,1>(esl_concat<6,3>(esl_concat<4,2>(esl_concat<1,3>(tmp_3_fu_92_p3.read(), ap_const_lv3_0), tmp_1_fu_100_p4.read()), ap_const_lv3_0), tmp_5_fu_110_p3.read()), ap_const_lv1_0), tmp_6_fu_118_p3.read()), ap_const_lv1_0), tmp_10_fu_126_p3.read()), ap_const_lv2_0), tmp_3_fu_92_p3.read()), ap_const_lv3_0), tmp_1_fu_100_p4.read()), ap_const_lv3_0), tmp_5_fu_110_p3.read()), ap_const_lv1_0), tmp_6_fu_118_p3.read()), ap_const_lv1_0), tmp_10_fu_126_p3.read()), ap_const_lv1_0), tmp_fu_88_p1.read());
}

void LFSR::thread_xor_s_fu_314_p2() {
    xor_s_fu_314_p2 = (tmp2_fu_308_p2.read() ^ tmp1_fu_302_p2.read());
}

void LFSR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

