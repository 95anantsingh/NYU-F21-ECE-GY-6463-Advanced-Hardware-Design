// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Dout.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Dout::ap_const_logic_1 = sc_dt::Log_1;
const bool Dout::ap_const_boolean_1 = true;
const sc_lv<1> Dout::ap_const_lv1_0 = "0";
const sc_lv<1> Dout::ap_const_lv1_1 = "1";
const sc_logic Dout::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Dout::ap_const_lv3_0 = "000";
const sc_lv<3> Dout::ap_const_lv3_1 = "1";
const sc_lv<3> Dout::ap_const_lv3_2 = "10";
const sc_lv<3> Dout::ap_const_lv3_3 = "11";
const sc_lv<32> Dout::ap_const_lv32_18 = "11000";
const sc_lv<32> Dout::ap_const_lv32_1F = "11111";
const sc_lv<32> Dout::ap_const_lv32_10 = "10000";
const sc_lv<32> Dout::ap_const_lv32_17 = "10111";
const sc_lv<32> Dout::ap_const_lv32_8 = "1000";
const sc_lv<32> Dout::ap_const_lv32_F = "1111";

Dout::Dout(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_data_out);
    sensitive << ( d_out );
    sensitive << ( tmp_fu_41_p2 );
    sensitive << ( tmp_5_fu_51_p2 );
    sensitive << ( tmp_8_fu_57_p2 );
    sensitive << ( tmp_2_fu_63_p2 );
    sensitive << ( tmp_15_fu_102_p1 );

    SC_METHOD(thread_data_out_ap_vld);
    sensitive << ( tmp_fu_41_p2 );
    sensitive << ( tmp_5_fu_51_p2 );
    sensitive << ( tmp_8_fu_57_p2 );
    sensitive << ( tmp_2_fu_63_p2 );

    SC_METHOD(thread_tmp_15_fu_102_p1);
    sensitive << ( d_out );

    SC_METHOD(thread_tmp_2_fu_63_p2);
    sensitive << ( out_cnt );
    sensitive << ( tmp_fu_41_p2 );
    sensitive << ( tmp_5_fu_51_p2 );
    sensitive << ( tmp_8_fu_57_p2 );

    SC_METHOD(thread_tmp_5_fu_51_p2);
    sensitive << ( out_cnt );
    sensitive << ( tmp_fu_41_p2 );

    SC_METHOD(thread_tmp_8_fu_57_p2);
    sensitive << ( out_cnt );
    sensitive << ( tmp_fu_41_p2 );
    sensitive << ( tmp_5_fu_51_p2 );

    SC_METHOD(thread_tmp_fu_41_p2);
    sensitive << ( out_cnt );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Dout_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_out, "(port)data_out");
    sc_trace(mVcdFile, data_out_ap_vld, "(port)data_out_ap_vld");
    sc_trace(mVcdFile, out_cnt, "(port)out_cnt");
    sc_trace(mVcdFile, d_out, "(port)d_out");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_41_p2, "tmp_fu_41_p2");
    sc_trace(mVcdFile, tmp_5_fu_51_p2, "tmp_5_fu_51_p2");
    sc_trace(mVcdFile, tmp_8_fu_57_p2, "tmp_8_fu_57_p2");
    sc_trace(mVcdFile, tmp_2_fu_63_p2, "tmp_2_fu_63_p2");
    sc_trace(mVcdFile, tmp_15_fu_102_p1, "tmp_15_fu_102_p1");
#endif

    }
}

Dout::~Dout() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Dout::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void Dout::thread_data_out() {
    if (esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_1)) {
        data_out = tmp_15_fu_102_p1.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_5_fu_51_p2.read(), ap_const_lv1_1))) {
        data_out = d_out.read().range(15, 8);
    } else if ((esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_51_p2.read()) && 
                esl_seteq<1,1,1>(tmp_8_fu_57_p2.read(), ap_const_lv1_1))) {
        data_out = d_out.read().range(23, 16);
    } else if ((esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_51_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_57_p2.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_63_p2.read(), ap_const_lv1_1))) {
        data_out = d_out.read().range(31, 24);
    } else {
        data_out = "XXXXXXXX";
    }
}

void Dout::thread_data_out_ap_vld() {
    if (((esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_51_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_57_p2.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_63_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_51_p2.read()) && 
          esl_seteq<1,1,1>(tmp_8_fu_57_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_5_fu_51_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(tmp_fu_41_p2.read(), ap_const_lv1_1))) {
        data_out_ap_vld = ap_const_logic_1;
    } else {
        data_out_ap_vld = ap_const_logic_0;
    }
}

void Dout::thread_tmp_15_fu_102_p1() {
    tmp_15_fu_102_p1 = d_out.read().range(8-1, 0);
}

void Dout::thread_tmp_2_fu_63_p2() {
    tmp_2_fu_63_p2 = (!out_cnt.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(out_cnt.read() == ap_const_lv3_3);
}

void Dout::thread_tmp_5_fu_51_p2() {
    tmp_5_fu_51_p2 = (!out_cnt.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(out_cnt.read() == ap_const_lv3_1);
}

void Dout::thread_tmp_8_fu_57_p2() {
    tmp_8_fu_57_p2 = (!out_cnt.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(out_cnt.read() == ap_const_lv3_2);
}

void Dout::thread_tmp_fu_41_p2() {
    tmp_fu_41_p2 = (!out_cnt.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(out_cnt.read() == ap_const_lv3_0);
}

}

