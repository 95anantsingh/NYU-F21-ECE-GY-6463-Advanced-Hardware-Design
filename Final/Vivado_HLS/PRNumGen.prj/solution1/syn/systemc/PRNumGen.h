// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _PRNumGen_HH_
#define _PRNumGen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Din.h"
#include "LFSR.h"
#include "Dout.h"

namespace ap_rtl {

struct PRNumGen : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > rstn;
    sc_in< sc_lv<1> > get_random;
    sc_in< sc_lv<1> > load_seed;
    sc_in< sc_lv<8> > data_in;
    sc_out< sc_lv<8> > data_out;
    sc_out< sc_logic > data_out_ap_vld;


    // Module declarations
    PRNumGen(sc_module_name name);
    SC_HAS_PROCESS(PRNumGen);

    ~PRNumGen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Din* grp_Din_fu_106;
    LFSR* grp_LFSR_fu_116;
    Dout* grp_Dout_fu_131;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > out_cnt;
    sc_signal< sc_lv<32> > d_out;
    sc_signal< sc_lv<3> > in_cnt;
    sc_signal< sc_lv<32> > d_in;
    sc_signal< sc_lv<1> > load_seed_read_read_fu_64_p2;
    sc_signal< sc_lv<1> > get_random_read_read_fu_70_p2;
    sc_signal< sc_lv<1> > rstn_read_read_fu_76_p2;
    sc_signal< sc_lv<3> > out_cnt_load_reg_228;
    sc_signal< sc_lv<1> > tmp_fu_162_p2;
    sc_signal< sc_lv<1> > tmp_reg_233;
    sc_signal< sc_lv<3> > in_cnt_load_reg_237;
    sc_signal< sc_lv<1> > tmp_1_fu_172_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_242;
    sc_signal< sc_lv<1> > grp_fu_152_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_246;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_Din_fu_106_ap_ready;
    sc_signal< sc_lv<32> > grp_Din_fu_106_d_in_o;
    sc_signal< sc_logic > grp_Din_fu_106_d_in_o_ap_vld;
    sc_signal< sc_logic > grp_LFSR_fu_116_ap_start;
    sc_signal< sc_logic > grp_LFSR_fu_116_ap_done;
    sc_signal< sc_logic > grp_LFSR_fu_116_ap_idle;
    sc_signal< sc_logic > grp_LFSR_fu_116_ap_ready;
    sc_signal< sc_lv<1> > grp_LFSR_fu_116_rstn;
    sc_signal< sc_lv<1> > grp_LFSR_fu_116_w_en;
    sc_signal< sc_lv<32> > grp_LFSR_fu_116_d_out;
    sc_signal< sc_logic > grp_LFSR_fu_116_d_out_ap_vld;
    sc_signal< sc_logic > grp_Dout_fu_131_ap_ready;
    sc_signal< sc_lv<8> > grp_Dout_fu_131_data_out;
    sc_signal< sc_logic > grp_Dout_fu_131_data_out_ap_vld;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > p_s_fu_184_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > grp_fu_90_p2;
    sc_signal< sc_lv<3> > grp_fu_90_p0;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data_out();
    void thread_data_out_ap_vld();
    void thread_get_random_read_read_fu_70_p2();
    void thread_grp_LFSR_fu_116_ap_start();
    void thread_grp_LFSR_fu_116_rstn();
    void thread_grp_LFSR_fu_116_w_en();
    void thread_grp_fu_152_p2();
    void thread_grp_fu_90_p0();
    void thread_grp_fu_90_p2();
    void thread_load_seed_read_read_fu_64_p2();
    void thread_p_s_fu_184_p3();
    void thread_rstn_read_read_fu_76_p2();
    void thread_tmp_1_fu_172_p2();
    void thread_tmp_fu_162_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
