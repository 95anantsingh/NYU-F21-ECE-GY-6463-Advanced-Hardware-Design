-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LFSR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rstn : IN STD_LOGIC_VECTOR (0 downto 0);
    w_en : IN STD_LOGIC_VECTOR (0 downto 0);
    d_in : IN STD_LOGIC_VECTOR (31 downto 0);
    d_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of LFSR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2468ACD : STD_LOGIC_VECTOR (31 downto 0) := "00000010010001101000101011001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rnum : STD_LOGIC_VECTOR (31 downto 0) := "00000010010001101000101011001101";
    signal rstn_read_read_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_en_read_read_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_92_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_100_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_88_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_180_p15 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_fu_134_p22 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_1_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_222_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_11_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_2_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_244_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_3_fu_278_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_236_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_s_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_292_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    rnum_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((w_en_read_read_fu_66_p2 = ap_const_lv1_1) and (rstn_read_read_fu_72_p2 = ap_const_lv1_1))) then 
                    rnum <= d_in;
                elsif (((w_en_read_read_fu_66_p2 = ap_const_lv1_0) and (rstn_read_read_fu_72_p2 = ap_const_lv1_1))) then 
                    rnum <= tmp_4_fu_320_p3;
                elsif ((rstn_read_read_fu_72_p2 = ap_const_lv1_0)) then 
                    rnum <= ap_const_lv32_2468ACD;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_out <= (xor_s_fu_314_p2 & tmp_2_fu_292_p4);

    d_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, rstn_read_read_fu_72_p2, w_en_read_read_fu_66_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (w_en_read_read_fu_66_p2 = ap_const_lv1_0) and (rstn_read_read_fu_72_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_out_ap_vld <= ap_const_logic_1;
        else 
            d_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rstn_read_read_fu_72_p2 <= rstn;
    tmp1_fu_302_p2 <= (tmp_fu_88_p1 xor tmp_12_fu_236_p3);
    tmp2_fu_308_p2 <= (tmp_14_fu_284_p3 xor tmp_13_fu_270_p3);
    tmp_10_fu_126_p3 <= rnum(18 downto 18);
    tmp_11_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_222_p4),32));
    tmp_12_fu_236_p3 <= xor_1_fu_216_p2(4 downto 4);
    tmp_13_fu_270_p3 <= xor_2_fu_254_p2(2 downto 2);
    tmp_14_fu_284_p3 <= xor_3_fu_278_p2(1 downto 1);
    tmp_1_fu_100_p4 <= rnum(27 downto 26);
    tmp_2_fu_292_p4 <= rnum(31 downto 1);
    tmp_3_fu_92_p3 <= rnum(31 downto 31);
    tmp_4_fu_320_p3 <= (xor_s_fu_314_p2 & tmp_2_fu_292_p4);
    tmp_5_fu_110_p3 <= rnum(22 downto 22);
    tmp_6_fu_118_p3 <= rnum(20 downto 20);
    tmp_7_fu_244_p4 <= xor_1_fu_216_p2(5 downto 4);
    tmp_8_fu_180_p15 <= (((((((((((((tmp_3_fu_92_p3 & ap_const_lv3_0) & tmp_1_fu_100_p4) & ap_const_lv3_0) & tmp_5_fu_110_p3) & ap_const_lv1_0) & tmp_6_fu_118_p3) & ap_const_lv1_0) & tmp_10_fu_126_p3) & ap_const_lv2_0) & tmp_3_fu_92_p3) & ap_const_lv3_0) & tmp_1_fu_100_p4) & ap_const_lv2_0);
    tmp_9_fu_222_p4 <= xor_1_fu_216_p2(31 downto 4);
    tmp_cast_fu_260_p4 <= xor_2_fu_254_p2(3 downto 2);
    tmp_fu_88_p1 <= rnum(1 - 1 downto 0);
    tmp_s_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_180_p15),32));
    w_en_read_read_fu_66_p2 <= w_en;
    xor_1_fu_216_p2 <= (xor_fu_134_p22 xor tmp_s_fu_212_p1);
    xor_2_fu_254_p2 <= (xor_1_fu_216_p2 xor tmp_11_fu_232_p1);
    xor_3_fu_278_p2 <= (tmp_cast_fu_260_p4 xor tmp_7_fu_244_p4);
    xor_fu_134_p22 <= ((((((((((((((((((((tmp_3_fu_92_p3 & ap_const_lv3_0) & tmp_1_fu_100_p4) & ap_const_lv3_0) & tmp_5_fu_110_p3) & ap_const_lv1_0) & tmp_6_fu_118_p3) & ap_const_lv1_0) & tmp_10_fu_126_p3) & ap_const_lv2_0) & tmp_3_fu_92_p3) & ap_const_lv3_0) & tmp_1_fu_100_p4) & ap_const_lv3_0) & tmp_5_fu_110_p3) & ap_const_lv1_0) & tmp_6_fu_118_p3) & ap_const_lv1_0) & tmp_10_fu_126_p3) & ap_const_lv1_0) & tmp_fu_88_p1);
    xor_s_fu_314_p2 <= (tmp2_fu_308_p2 xor tmp1_fu_302_p2);
end behav;
