-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PRNumGen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rstn : IN STD_LOGIC_VECTOR (0 downto 0);
    get_random : IN STD_LOGIC_VECTOR (0 downto 0);
    load_seed : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in : IN STD_LOGIC_VECTOR (7 downto 0);
    data_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of PRNumGen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PRNumGen,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.557750,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=118,HLS_SYN_LUT=470,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_cnt : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal d_out : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_cnt : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal d_in : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal load_seed_read_read_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal get_random_read_read_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rstn_read_read_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_cnt_load_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_cnt_load_reg_237 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_Din_fu_106_ap_ready : STD_LOGIC;
    signal grp_Din_fu_106_d_in_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Din_fu_106_d_in_o_ap_vld : STD_LOGIC;
    signal grp_LFSR_fu_116_ap_start : STD_LOGIC;
    signal grp_LFSR_fu_116_ap_done : STD_LOGIC;
    signal grp_LFSR_fu_116_ap_idle : STD_LOGIC;
    signal grp_LFSR_fu_116_ap_ready : STD_LOGIC;
    signal grp_LFSR_fu_116_rstn : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LFSR_fu_116_w_en : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LFSR_fu_116_d_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LFSR_fu_116_d_out_ap_vld : STD_LOGIC;
    signal grp_Dout_fu_131_ap_ready : STD_LOGIC;
    signal grp_Dout_fu_131_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Dout_fu_131_data_out_ap_vld : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_s_fu_184_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_90_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component Din IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_in_read : IN STD_LOGIC_VECTOR (7 downto 0);
        in_cnt : IN STD_LOGIC_VECTOR (2 downto 0);
        d_in_i : IN STD_LOGIC_VECTOR (31 downto 0);
        d_in_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_in_o_ap_vld : OUT STD_LOGIC );
    end component;


    component LFSR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rstn : IN STD_LOGIC_VECTOR (0 downto 0);
        w_en : IN STD_LOGIC_VECTOR (0 downto 0);
        d_in : IN STD_LOGIC_VECTOR (31 downto 0);
        d_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_out_ap_vld : OUT STD_LOGIC );
    end component;


    component Dout IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_out_ap_vld : OUT STD_LOGIC;
        out_cnt : IN STD_LOGIC_VECTOR (2 downto 0);
        d_out : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Din_fu_106 : component Din
    port map (
        ap_ready => grp_Din_fu_106_ap_ready,
        data_in_read => data_in,
        in_cnt => in_cnt,
        d_in_i => d_in,
        d_in_o => grp_Din_fu_106_d_in_o,
        d_in_o_ap_vld => grp_Din_fu_106_d_in_o_ap_vld);

    grp_LFSR_fu_116 : component LFSR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LFSR_fu_116_ap_start,
        ap_done => grp_LFSR_fu_116_ap_done,
        ap_idle => grp_LFSR_fu_116_ap_idle,
        ap_ready => grp_LFSR_fu_116_ap_ready,
        rstn => grp_LFSR_fu_116_rstn,
        w_en => grp_LFSR_fu_116_w_en,
        d_in => d_in,
        d_out => grp_LFSR_fu_116_d_out,
        d_out_ap_vld => grp_LFSR_fu_116_d_out_ap_vld);

    grp_Dout_fu_131 : component Dout
    port map (
        ap_ready => grp_Dout_fu_131_ap_ready,
        data_out => grp_Dout_fu_131_data_out,
        data_out_ap_vld => grp_Dout_fu_131_data_out_ap_vld,
        out_cnt => out_cnt,
        d_out => d_out);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_cnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((load_seed_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                in_cnt <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                in_cnt <= grp_fu_90_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_1_reg_242 = ap_const_lv1_0) and (tmp_5_reg_246 = ap_const_lv1_1) and (tmp_reg_233 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                in_cnt <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    out_cnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((get_random_read_read_fu_70_p2 = ap_const_lv1_1) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                out_cnt <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_cnt <= p_s_fu_184_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_cnt <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_1_fu_172_p2 = ap_const_lv1_1) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_1) and (grp_Din_fu_106_d_in_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((tmp_1_fu_172_p2 = ap_const_lv1_0) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (grp_Din_fu_106_d_in_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then
                d_in <= grp_Din_fu_106_d_in_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_1_reg_242 = ap_const_lv1_0) and (tmp_5_reg_246 = ap_const_lv1_1) and (tmp_reg_233 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (grp_LFSR_fu_116_d_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (grp_LFSR_fu_116_d_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((grp_LFSR_fu_116_d_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                d_out <= grp_LFSR_fu_116_d_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_cnt_load_reg_237 <= in_cnt;
                tmp_1_reg_242 <= tmp_1_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                out_cnt_load_reg_228 <= out_cnt;
                tmp_reg_233 <= tmp_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_5_reg_246 <= grp_fu_152_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rstn_read_read_fu_76_p2, tmp_fu_162_p2, tmp_1_fu_172_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_1_fu_172_p2 = ap_const_lv1_1) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((tmp_1_fu_172_p2 = ap_const_lv1_0) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((tmp_fu_162_p2 = ap_const_lv1_0) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((rstn_read_read_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_out_assign_proc : process(ap_start, ap_CS_fsm_state1, load_seed_read_read_fu_64_p2, get_random_read_read_fu_70_p2, rstn_read_read_fu_76_p2, tmp_fu_162_p2, tmp_1_fu_172_p2, grp_Dout_fu_131_data_out, grp_Dout_fu_131_data_out_ap_vld, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            data_out <= ap_const_lv8_0;
        elsif ((((tmp_1_fu_172_p2 = ap_const_lv1_1) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (get_random_read_read_fu_70_p2 = ap_const_lv1_1) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (grp_Dout_fu_131_data_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((tmp_fu_162_p2 = ap_const_lv1_0) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (grp_Dout_fu_131_data_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            data_out <= grp_Dout_fu_131_data_out;
        else 
            data_out <= "XXXXXXXX";
        end if; 
    end process;


    data_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, load_seed_read_read_fu_64_p2, get_random_read_read_fu_70_p2, rstn_read_read_fu_76_p2, tmp_fu_162_p2, tmp_1_fu_172_p2, grp_Dout_fu_131_data_out_ap_vld, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            data_out_ap_vld <= ap_const_logic_1;
        elsif ((((tmp_1_fu_172_p2 = ap_const_lv1_1) and (tmp_fu_162_p2 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (get_random_read_read_fu_70_p2 = ap_const_lv1_1) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((tmp_fu_162_p2 = ap_const_lv1_0) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            data_out_ap_vld <= grp_Dout_fu_131_data_out_ap_vld;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    get_random_read_read_fu_70_p2 <= get_random;

    grp_LFSR_fu_116_ap_start_assign_proc : process(load_seed_read_read_fu_64_p2, get_random_read_read_fu_70_p2, rstn_read_read_fu_76_p2, tmp_reg_233, tmp_1_reg_242, tmp_5_reg_246, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_1_reg_242 = ap_const_lv1_0) and (tmp_5_reg_246 = ap_const_lv1_1) and (tmp_reg_233 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_LFSR_fu_116_ap_start <= ap_const_logic_1;
        else 
            grp_LFSR_fu_116_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_LFSR_fu_116_rstn_assign_proc : process(load_seed_read_read_fu_64_p2, get_random_read_read_fu_70_p2, rstn_read_read_fu_76_p2, tmp_reg_233, tmp_1_reg_242, tmp_5_reg_246, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((tmp_1_reg_242 = ap_const_lv1_0) and (tmp_5_reg_246 = ap_const_lv1_1) and (tmp_reg_233 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_LFSR_fu_116_rstn <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_LFSR_fu_116_rstn <= ap_const_lv1_0;
        else 
            grp_LFSR_fu_116_rstn <= "X";
        end if; 
    end process;


    grp_LFSR_fu_116_w_en_assign_proc : process(load_seed_read_read_fu_64_p2, get_random_read_read_fu_70_p2, rstn_read_read_fu_76_p2, tmp_reg_233, tmp_1_reg_242, tmp_5_reg_246, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((tmp_1_reg_242 = ap_const_lv1_0) and (tmp_5_reg_246 = ap_const_lv1_1) and (tmp_reg_233 = ap_const_lv1_1) and (rstn_read_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_LFSR_fu_116_w_en <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((get_random_read_read_fu_70_p2 = ap_const_lv1_0) and (load_seed_read_read_fu_64_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_LFSR_fu_116_w_en <= ap_const_lv1_0;
        else 
            grp_LFSR_fu_116_w_en <= "X";
        end if; 
    end process;

    grp_fu_152_p2 <= "1" when (grp_fu_90_p2 = ap_const_lv3_4) else "0";

    grp_fu_90_p0_assign_proc : process(out_cnt_load_reg_228, in_cnt_load_reg_237, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_90_p0 <= in_cnt_load_reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_90_p0 <= out_cnt_load_reg_228;
        else 
            grp_fu_90_p0 <= "XXX";
        end if; 
    end process;

    grp_fu_90_p2 <= std_logic_vector(unsigned(grp_fu_90_p0) + unsigned(ap_const_lv3_1));
    load_seed_read_read_fu_64_p2 <= load_seed;
    p_s_fu_184_p3 <= 
        ap_const_lv3_0 when (grp_fu_152_p2(0) = '1') else 
        grp_fu_90_p2;
    rstn_read_read_fu_76_p2 <= rstn;
    tmp_1_fu_172_p2 <= "1" when (in_cnt = ap_const_lv3_0) else "0";
    tmp_fu_162_p2 <= "1" when (out_cnt = ap_const_lv3_0) else "0";
end behav;
