// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LFSR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rstn,
        w_en,
        d_in,
        d_out,
        d_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] rstn;
input  [0:0] w_en;
input  [31:0] d_in;
output  [31:0] d_out;
output   d_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] rnum;
wire   [0:0] rstn_read_read_fu_72_p2;
wire   [31:0] tmp_4_fu_320_p3;
wire   [0:0] w_en_read_read_fu_66_p2;
wire   [0:0] tmp_3_fu_92_p3;
wire   [1:0] tmp_1_fu_100_p4;
wire   [0:0] tmp_5_fu_110_p3;
wire   [0:0] tmp_6_fu_118_p3;
wire   [0:0] tmp_10_fu_126_p3;
wire   [0:0] tmp_fu_88_p1;
wire   [23:0] tmp_8_fu_180_p15;
wire   [31:0] tmp_s_fu_212_p1;
wire   [31:0] xor_fu_134_p22;
wire   [31:0] xor_1_fu_216_p2;
wire   [27:0] tmp_9_fu_222_p4;
wire   [31:0] tmp_11_fu_232_p1;
wire   [31:0] xor_2_fu_254_p2;
wire   [1:0] tmp_cast_fu_260_p4;
wire   [1:0] tmp_7_fu_244_p4;
wire   [1:0] xor_3_fu_278_p2;
wire   [0:0] tmp_12_fu_236_p3;
wire   [0:0] tmp_13_fu_270_p3;
wire   [0:0] tmp_14_fu_284_p3;
wire   [0:0] tmp2_fu_308_p2;
wire   [0:0] tmp1_fu_302_p2;
wire   [0:0] xor_s_fu_314_p2;
wire   [30:0] tmp_2_fu_292_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 rnum = 32'd38177485;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((w_en_read_read_fu_66_p2 == 1'd1) & (rstn_read_read_fu_72_p2 == 1'd1))) begin
            rnum <= d_in;
        end else if (((w_en_read_read_fu_66_p2 == 1'd0) & (rstn_read_read_fu_72_p2 == 1'd1))) begin
            rnum <= tmp_4_fu_320_p3;
        end else if ((rstn_read_read_fu_72_p2 == 1'd0)) begin
            rnum <= 32'd38177485;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (w_en_read_read_fu_66_p2 == 1'd0) & (rstn_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_out_ap_vld = 1'b1;
    end else begin
        d_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign d_out = {{xor_s_fu_314_p2}, {tmp_2_fu_292_p4}};

assign rstn_read_read_fu_72_p2 = rstn;

assign tmp1_fu_302_p2 = (tmp_fu_88_p1 ^ tmp_12_fu_236_p3);

assign tmp2_fu_308_p2 = (tmp_14_fu_284_p3 ^ tmp_13_fu_270_p3);

assign tmp_10_fu_126_p3 = rnum[32'd18];

assign tmp_11_fu_232_p1 = tmp_9_fu_222_p4;

assign tmp_12_fu_236_p3 = xor_1_fu_216_p2[32'd4];

assign tmp_13_fu_270_p3 = xor_2_fu_254_p2[32'd2];

assign tmp_14_fu_284_p3 = xor_3_fu_278_p2[32'd1];

assign tmp_1_fu_100_p4 = {{rnum[27:26]}};

assign tmp_2_fu_292_p4 = {{rnum[31:1]}};

assign tmp_3_fu_92_p3 = rnum[32'd31];

assign tmp_4_fu_320_p3 = {{xor_s_fu_314_p2}, {tmp_2_fu_292_p4}};

assign tmp_5_fu_110_p3 = rnum[32'd22];

assign tmp_6_fu_118_p3 = rnum[32'd20];

assign tmp_7_fu_244_p4 = {{xor_1_fu_216_p2[5:4]}};

assign tmp_8_fu_180_p15 = {{{{{{{{{{{{{{tmp_3_fu_92_p3}, {3'd0}}, {tmp_1_fu_100_p4}}, {3'd0}}, {tmp_5_fu_110_p3}}, {1'd0}}, {tmp_6_fu_118_p3}}, {1'd0}}, {tmp_10_fu_126_p3}}, {2'd0}}, {tmp_3_fu_92_p3}}, {3'd0}}, {tmp_1_fu_100_p4}}, {2'd0}};

assign tmp_9_fu_222_p4 = {{xor_1_fu_216_p2[31:4]}};

assign tmp_cast_fu_260_p4 = {{xor_2_fu_254_p2[3:2]}};

assign tmp_fu_88_p1 = rnum[0:0];

assign tmp_s_fu_212_p1 = tmp_8_fu_180_p15;

assign w_en_read_read_fu_66_p2 = w_en;

assign xor_1_fu_216_p2 = (xor_fu_134_p22 ^ tmp_s_fu_212_p1);

assign xor_2_fu_254_p2 = (xor_1_fu_216_p2 ^ tmp_11_fu_232_p1);

assign xor_3_fu_278_p2 = (tmp_cast_fu_260_p4 ^ tmp_7_fu_244_p4);

assign xor_fu_134_p22 = {{{{{{{{{{{{{{{{{{{{{tmp_3_fu_92_p3}, {3'd0}}, {tmp_1_fu_100_p4}}, {3'd0}}, {tmp_5_fu_110_p3}}, {1'd0}}, {tmp_6_fu_118_p3}}, {1'd0}}, {tmp_10_fu_126_p3}}, {2'd0}}, {tmp_3_fu_92_p3}}, {3'd0}}, {tmp_1_fu_100_p4}}, {3'd0}}, {tmp_5_fu_110_p3}}, {1'd0}}, {tmp_6_fu_118_p3}}, {1'd0}}, {tmp_10_fu_126_p3}}, {1'd0}}, {tmp_fu_88_p1}};

assign xor_s_fu_314_p2 = (tmp2_fu_308_p2 ^ tmp1_fu_302_p2);

endmodule //LFSR
