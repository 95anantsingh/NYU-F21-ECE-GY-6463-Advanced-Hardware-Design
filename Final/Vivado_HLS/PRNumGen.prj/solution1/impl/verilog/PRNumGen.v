// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PRNumGen,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.557750,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=118,HLS_SYN_LUT=470,HLS_VERSION=2018_3}" *)

module PRNumGen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rstn,
        get_random,
        load_seed,
        data_in,
        data_out,
        data_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] rstn;
input  [0:0] get_random;
input  [0:0] load_seed;
input  [7:0] data_in;
output  [7:0] data_out;
output   data_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] data_out;
reg data_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] out_cnt;
reg   [31:0] d_out;
reg   [2:0] in_cnt;
reg   [31:0] d_in;
wire   [0:0] load_seed_read_read_fu_64_p2;
wire   [0:0] get_random_read_read_fu_70_p2;
wire   [0:0] rstn_read_read_fu_76_p2;
reg   [2:0] out_cnt_load_reg_228;
wire   [0:0] tmp_fu_162_p2;
reg   [0:0] tmp_reg_233;
reg   [2:0] in_cnt_load_reg_237;
wire   [0:0] tmp_1_fu_172_p2;
reg   [0:0] tmp_1_reg_242;
wire   [0:0] grp_fu_152_p2;
reg   [0:0] tmp_5_reg_246;
wire    ap_CS_fsm_state4;
wire    grp_Din_fu_106_ap_ready;
wire   [31:0] grp_Din_fu_106_d_in_o;
wire    grp_Din_fu_106_d_in_o_ap_vld;
reg    grp_LFSR_fu_116_ap_start;
wire    grp_LFSR_fu_116_ap_done;
wire    grp_LFSR_fu_116_ap_idle;
wire    grp_LFSR_fu_116_ap_ready;
reg   [0:0] grp_LFSR_fu_116_rstn;
reg   [0:0] grp_LFSR_fu_116_w_en;
wire   [31:0] grp_LFSR_fu_116_d_out;
wire    grp_LFSR_fu_116_d_out_ap_vld;
wire    grp_Dout_fu_131_ap_ready;
wire   [7:0] grp_Dout_fu_131_data_out;
wire    grp_Dout_fu_131_data_out_ap_vld;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [2:0] p_s_fu_184_p3;
wire    ap_CS_fsm_state3;
wire   [2:0] grp_fu_90_p2;
reg   [2:0] grp_fu_90_p0;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 out_cnt = 3'd0;
#0 d_out = 32'd0;
#0 in_cnt = 3'd0;
#0 d_in = 32'd0;
end

Din grp_Din_fu_106(
    .ap_ready(grp_Din_fu_106_ap_ready),
    .data_in_read(data_in),
    .in_cnt(in_cnt),
    .d_in_i(d_in),
    .d_in_o(grp_Din_fu_106_d_in_o),
    .d_in_o_ap_vld(grp_Din_fu_106_d_in_o_ap_vld)
);

LFSR grp_LFSR_fu_116(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LFSR_fu_116_ap_start),
    .ap_done(grp_LFSR_fu_116_ap_done),
    .ap_idle(grp_LFSR_fu_116_ap_idle),
    .ap_ready(grp_LFSR_fu_116_ap_ready),
    .rstn(grp_LFSR_fu_116_rstn),
    .w_en(grp_LFSR_fu_116_w_en),
    .d_in(d_in),
    .d_out(grp_LFSR_fu_116_d_out),
    .d_out_ap_vld(grp_LFSR_fu_116_d_out_ap_vld)
);

Dout grp_Dout_fu_131(
    .ap_ready(grp_Dout_fu_131_ap_ready),
    .data_out(grp_Dout_fu_131_data_out),
    .data_out_ap_vld(grp_Dout_fu_131_data_out_ap_vld),
    .out_cnt(out_cnt),
    .d_out(d_out)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((load_seed_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        in_cnt <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_cnt <= grp_fu_90_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((tmp_1_reg_242 == 1'd0) & (tmp_5_reg_246 == 1'd1) & (tmp_reg_233 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_cnt <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((get_random_read_read_fu_70_p2 == 1'd1) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        out_cnt <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_cnt <= p_s_fu_184_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_cnt <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_1_fu_172_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (load_seed_read_read_fu_64_p2 == 1'd1) & (grp_Din_fu_106_d_in_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((tmp_1_fu_172_p2 == 1'd0) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (grp_Din_fu_106_d_in_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        d_in <= grp_Din_fu_106_d_in_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_1_reg_242 == 1'd0) & (tmp_5_reg_246 == 1'd1) & (tmp_reg_233 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (grp_LFSR_fu_116_d_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (grp_LFSR_fu_116_d_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_LFSR_fu_116_d_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        d_out <= grp_LFSR_fu_116_d_out;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_cnt_load_reg_237 <= in_cnt;
        tmp_1_reg_242 <= tmp_1_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_cnt_load_reg_228 <= out_cnt;
        tmp_reg_233 <= tmp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_5_reg_246 <= grp_fu_152_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        data_out = 8'd0;
    end else if ((((tmp_1_fu_172_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (get_random_read_read_fu_70_p2 == 1'd1) & (load_seed_read_read_fu_64_p2 == 1'd0) & (grp_Dout_fu_131_data_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((tmp_fu_162_p2 == 1'd0) & (rstn_read_read_fu_76_p2 == 1'd1) & (grp_Dout_fu_131_data_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        data_out = grp_Dout_fu_131_data_out;
    end else begin
        data_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        data_out_ap_vld = 1'b1;
    end else if ((((tmp_1_fu_172_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (get_random_read_read_fu_70_p2 == 1'd1) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((tmp_fu_162_p2 == 1'd0) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        data_out_ap_vld = grp_Dout_fu_131_data_out_ap_vld;
    end else begin
        data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_1_reg_242 == 1'd0) & (tmp_5_reg_246 == 1'd1) & (tmp_reg_233 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_LFSR_fu_116_ap_start = 1'b1;
    end else begin
        grp_LFSR_fu_116_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_242 == 1'd0) & (tmp_5_reg_246 == 1'd1) & (tmp_reg_233 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_LFSR_fu_116_rstn = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_LFSR_fu_116_rstn = 1'd0;
    end else begin
        grp_LFSR_fu_116_rstn = 'bx;
    end
end

always @ (*) begin
    if (((tmp_1_reg_242 == 1'd0) & (tmp_5_reg_246 == 1'd1) & (tmp_reg_233 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        grp_LFSR_fu_116_w_en = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((get_random_read_read_fu_70_p2 == 1'd0) & (load_seed_read_read_fu_64_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_LFSR_fu_116_w_en = 1'd0;
    end else begin
        grp_LFSR_fu_116_w_en = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_90_p0 = in_cnt_load_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_90_p0 = out_cnt_load_reg_228;
    end else begin
        grp_fu_90_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_1_fu_172_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((tmp_1_fu_172_p2 == 1'd0) & (tmp_fu_162_p2 == 1'd1) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((tmp_fu_162_p2 == 1'd0) & (rstn_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((rstn_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign get_random_read_read_fu_70_p2 = get_random;

assign grp_fu_152_p2 = ((grp_fu_90_p2 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_90_p2 = (grp_fu_90_p0 + 3'd1);

assign load_seed_read_read_fu_64_p2 = load_seed;

assign p_s_fu_184_p3 = ((grp_fu_152_p2[0:0] === 1'b1) ? 3'd0 : grp_fu_90_p2);

assign rstn_read_read_fu_76_p2 = rstn;

assign tmp_1_fu_172_p2 = ((in_cnt == 3'd0) ? 1'b1 : 1'b0);

assign tmp_fu_162_p2 = ((out_cnt == 3'd0) ? 1'b1 : 1'b0);

endmodule //PRNumGen
