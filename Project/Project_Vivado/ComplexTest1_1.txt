
/*
 * Standalone assembly language program for NYU-6463-RV32I processor
 * The label 'reset handler' will be called upon startup.
*/

.global reset_handler
.type reset_handler,@function


reset_handler:
addi x10,x0,1
sw x10,0(x0)
addi x10,x0,3
sw x10,4(x0)
addi x10,x0,7
sw x10,8(x0)
addi x10,x0,9
sw x10,12(x0)
addi x10,x0,11
sw x10,16(x0)
addi x10,x0,13
sw x10,20(x0)
addi x10,x0,15
sw x10,24(x0)
addi x10,x0,17
sw x10,28(x0)
addi x10,x0,19
sw x10,32(x0)
addi x10,x0,21
sw x10,36(x0)
addi x10,x0,23
sw x10,40(x0)
addi x10,x0,0
addi x11,x0,8
addi x12,x0,12
    # x10 = int arr[]
    # x11 = int key
    # x12 = int size
    # x5 = mid
    # x6 = left
    # x7 = right
    addi    x6, zero, 0  # left = 0
    addi    x7, a2, -1   # right = size - 1
LOOP1:
# while loop
    blt     x6, x7, ABSENT     # left > right, break
    add     x5, x6, x7  # mid = left + right
    srai    x5, x5, 1        # mid = (left + right) / 2
    # Get the element at the midpoint
    slli    x29, t0, 2    # Scale the midpoint by 4
    add     x29, a0, x29   # Get the memory address of arr[mid]
    lw      x29, 0(x29)    # Dereference arr[mid]
    # See if the key (a1) > arr[mid] (t3)
    bge     x29, x11, LOOP2   # if key <= t4, we need to check the next condition
    # If we get here, then the key is > arr[mid]
    addi    x6, x5, 1    # left = mid + 1
    jal     zero, LOOP1
LOOP2:
    beq     x11, x29, FOUND   # skip if key === arr[mid]
    # If we get here, then key < arr[mid]
    addi    x7, x5, -1   # right = mid - 1
    jal     zero, LOOP1
FOUND:
    # If we get here, then key == arr[mid]
    slli    x2, x5, 2    # Scale the midpoint by 4
    lw x1, 0(x2)
    jal zero,halt
ABSENT:
addi x1,x0,-1
halt:    
ecall




/*

00100513
00a02023
00300513
00a02223
00700513
00a02423
00900513
00a02623
00b00513
00a02823
00d00513
00a02a23
00f00513
00a02c23
01100513
00a02e23
01300513
02a02023
01500513
02a02223
01700513
02a02423
00000513
00800593
00b00613
00000313
fff60393
0263cc63
007302b3
4012d293
00229e93
01d50eb3
000eae83
00bed663
00128313
fe1ff06f
01d58663
fff28393
fd5ff06f
00229113
00012083
00000073

*/

/*
 * Standalone assembly language program for NYU-6463-RV32I processor
 * The label 'reset handler' will be called upon startup.
*/

.global reset_handler
.type reset_handler,@function


reset_handler:
addi a0,x0,1
sw a0,0(x0)
addi a0,x0,3
sw a0,4(x0)
addi a0,x0,7
sw a0,8(x0)
addi a0,x0,9
sw a0,12(x0)
addi a0,x0,11
sw a0,16(x0)
addi a0,x0,13
sw a0,20(x0)
addi a0,x0,15
sw a0,24(x0)
addi a0,x0,17
sw a0,28(x0)
addi a0,x0,19
sw a0,32(x0)
addi a0,x0,21
sw a0,36(x0)
addi a0,x0,23
sw a0,40(x0)
#Set a0 register as address of first element of arr[]
addi a0,x0,0
#value of key : element to be searched
addi a1,x0,8
#Store size of the arr[] in a2
addi a2,x0,11
#Start the Binary Search
 addi t1, zero, 0 # left = 0
 addi t2, a2, -1 # right = size - 1
LOOP1:
# while loop
 blt t2, t1, HALT # right < left , break
 add t0, t1, t2 # mid = left + right
 srai t0, t0, 1 # mid = (left + right) / 2
 # Get the element at the midpoint
 slli t4, t0, 2 # Scale the midpoint by 4
 add t4, a0, t4 # Get the memory address of arr[mid]
 lw t4, 0(t4) # Dereference arr[mid]
# See if the key (a1) > arr[mid] (t3)
 bge t4, a1, LOOP2 # if key <= t4, we need to check the next condition
 # If we get here, then the key is > arr[mid]
 addi t1, t0, 1 # left = mid + 1
 jal zero, LOOP1
LOOP2:
 beq a1, t4, FOUND # skip if key === arr[mid]
 # If we get here, then key < arr[mid]
 addi t2, t0, -1 # right = mid - 1
 jal zero, LOOP1
FOUND:
 # If we get here, then key == arr[mid]
 slli sp, t0, 2 # Scale the midpoint by 4
 lw ra, 0(sp)
HALT:
 ecall



/*

00100513
00a02023
00300513
00a02223
00700513
00a02423
00900513
00a02623
00b00513
00a02823
00d00513
00a02a23
00f00513
00a02c23
01100513
00a02e23
01300513
02a02023
01500513
02a02223
01700513
02a02423
00000513
00800593
00b00613
00000313
fff60393
0263cc63
007302b3
4012d293
00229e93
01d50eb3
000eae83
00bed663
00128313
fe1ff06f
01d58663
fff28393
fd5ff06f
00229113
00012083
00000073

*/
