// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> fir::ap_ST_fsm_state1 = "1";
const sc_lv<6> fir::ap_ST_fsm_state2 = "10";
const sc_lv<6> fir::ap_ST_fsm_state3 = "100";
const sc_lv<6> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<6> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<6> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<4> fir::ap_const_lv4_A = "1010";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<4> fir::ap_const_lv4_F = "1111";
const sc_lv<32> fir::ap_const_lv32_35 = "110101";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    C1_U = new fir_C1("C1_U");
    C1_U->clk(ap_clk);
    C1_U->reset(ap_rst);
    C1_U->address0(C1_address0);
    C1_U->ce0(C1_ce0);
    C1_U->q0(C1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_fu_125_p1 );

    SC_METHOD(thread_C1_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_acc_1_fu_143_p2);
    sensitive << ( tmp_4_reg_198 );
    sensitive << ( acc_reg_85 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_114_p2);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_108_p2 );
    sensitive << ( tmp_3_reg_173 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_120_p1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( x );
    sensitive << ( shift_reg_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_2_fu_120_p1);
    sensitive << ( i_1_fu_114_p2 );

    SC_METHOD(thread_tmp_3_fu_125_p1);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_tmp_4_fu_138_p1);
    sensitive << ( C1_load_reg_193 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_4_fu_138_p2);
    sensitive << ( shift_reg_load_reg_188 );
    sensitive << ( tmp_4_fu_138_p1 );

    SC_METHOD(thread_tmp_6_fu_130_p0);
    sensitive << ( x );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_6_fu_130_p2);
    sensitive << ( tmp_6_fu_130_p0 );

    SC_METHOD(thread_tmp_fu_108_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_y);
    sensitive << ( tmp_6_reg_183 );
    sensitive << ( acc_reg_85 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_108_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
    sc_trace(mVcdFile, x, "(port)x");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, C1_address0, "C1_address0");
    sc_trace(mVcdFile, C1_ce0, "C1_ce0");
    sc_trace(mVcdFile, C1_q0, "C1_q0");
    sc_trace(mVcdFile, i_1_fu_114_p2, "i_1_fu_114_p2");
    sc_trace(mVcdFile, i_1_reg_163, "i_1_reg_163");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_108_p2, "tmp_fu_108_p2");
    sc_trace(mVcdFile, tmp_3_fu_125_p1, "tmp_3_fu_125_p1");
    sc_trace(mVcdFile, tmp_3_reg_173, "tmp_3_reg_173");
    sc_trace(mVcdFile, tmp_6_fu_130_p2, "tmp_6_fu_130_p2");
    sc_trace(mVcdFile, tmp_6_reg_183, "tmp_6_reg_183");
    sc_trace(mVcdFile, shift_reg_load_reg_188, "shift_reg_load_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, C1_load_reg_193, "C1_load_reg_193");
    sc_trace(mVcdFile, tmp_4_fu_138_p2, "tmp_4_fu_138_p2");
    sc_trace(mVcdFile, tmp_4_reg_198, "tmp_4_reg_198");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, acc_1_fu_143_p2, "acc_1_fu_143_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, acc_reg_85, "acc_reg_85");
    sc_trace(mVcdFile, i_reg_97, "i_reg_97");
    sc_trace(mVcdFile, tmp_2_fu_120_p1, "tmp_2_fu_120_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_6_fu_130_p0, "tmp_6_fu_130_p0");
    sc_trace(mVcdFile, tmp_4_fu_138_p1, "tmp_4_fu_138_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete C1_U;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        acc_reg_85 = acc_1_fu_143_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        acc_reg_85 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_97 = i_1_reg_163.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_97 = ap_const_lv4_A;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        C1_load_reg_193 = C1_q0.read();
        shift_reg_load_reg_188 = shift_reg_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_0))) {
        i_1_reg_163 = i_1_fu_114_p2.read();
        tmp_3_reg_173 = tmp_3_fu_125_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_4_reg_198 = tmp_4_fu_138_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1))) {
        tmp_6_reg_183 = tmp_6_fu_130_p2.read();
    }
}

void fir::thread_C1_address0() {
    C1_address0 =  (sc_lv<4>) (tmp_3_fu_125_p1.read());
}

void fir::thread_C1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        C1_ce0 = ap_const_logic_1;
    } else {
        C1_ce0 = ap_const_logic_0;
    }
}

void fir::thread_acc_1_fu_143_p2() {
    acc_1_fu_143_p2 = (!tmp_4_reg_198.read().is_01() || !acc_reg_85.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_4_reg_198.read()) + sc_biguint<32>(acc_reg_85.read()));
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_i_1_fu_114_p2() {
    i_1_fu_114_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_97.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void fir::thread_shift_reg_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_3_reg_173.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1))) {
        shift_reg_address0 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_2_fu_120_p1.read());
    } else {
        shift_reg_address0 = "XXXX";
    }
}

void fir::thread_shift_reg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_d0 = shift_reg_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1))) {
        shift_reg_d0 = x.read();
    } else {
        shift_reg_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_2_fu_120_p1() {
    tmp_2_fu_120_p1 = esl_zext<64,4>(i_1_fu_114_p2.read());
}

void fir::thread_tmp_3_fu_125_p1() {
    tmp_3_fu_125_p1 = esl_zext<64,4>(i_reg_97.read());
}

void fir::thread_tmp_4_fu_138_p1() {
    tmp_4_fu_138_p1 = C1_load_reg_193.read();
}

void fir::thread_tmp_4_fu_138_p2() {
    tmp_4_fu_138_p2 = (!shift_reg_load_reg_188.read().is_01() || !tmp_4_fu_138_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(shift_reg_load_reg_188.read()) * sc_bigint<10>(tmp_4_fu_138_p1.read());
}

void fir::thread_tmp_6_fu_130_p0() {
    tmp_6_fu_130_p0 = x.read();
}

void fir::thread_tmp_6_fu_130_p2() {
    tmp_6_fu_130_p2 = (!tmp_6_fu_130_p0.read().is_01() || !ap_const_lv32_35.is_01())? sc_lv<32>(): sc_bigint<32>(tmp_6_fu_130_p0.read()) * sc_biguint<32>(ap_const_lv32_35);
}

void fir::thread_tmp_fu_108_p2() {
    tmp_fu_108_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_97.read() == ap_const_lv4_0);
}

void fir::thread_y() {
    y = (!acc_reg_85.read().is_01() || !tmp_6_reg_183.read().is_01())? sc_lv<32>(): (sc_biguint<32>(acc_reg_85.read()) + sc_biguint<32>(tmp_6_reg_183.read()));
}

void fir::thread_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_108_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

